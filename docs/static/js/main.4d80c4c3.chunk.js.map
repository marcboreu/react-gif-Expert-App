{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","flex","iconButton","AddCategory","setCategories","classes","useState","inputValue","setinputValue","handleSubmit","e","preventDefault","trim","length","cats","onSubmit","Paper","className","elevation","InputBase","placeholder","value","onChange","target","onClick","IconButton","aria-label","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","style","backgroundImage","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","Container","fluid","ReactDOM","render","document","getElementById"],"mappings":"uPAQMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,MAAO,QAEXC,MAAO,CACHC,WAAY,EACZC,KAAM,GAEVC,WAAY,CACRP,QAAS,QAIJQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEnBC,EAAUd,IAF4B,EAIRe,mBAAS,IAJD,mBAIrCC,EAJqC,KAIzBC,EAJyB,KAUtCC,EAAe,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BT,GAAe,SAAAU,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKtB,OACI,sBAAMO,SAAUN,EAAhB,SACI,eAACO,EAAA,EAAD,CAAOC,UAAWZ,EAAQX,KAAMwB,UAAW,EAA3C,UACA,cAACC,EAAA,EAAD,CACIF,UAAWZ,EAAQN,MACnBqB,YAAY,cACZC,MAAOd,EACPe,SArBc,SAACZ,GACvBF,EAAcE,EAAEa,OAAOF,QAqBfG,QAASf,IAEb,cAACgB,EAAA,EAAD,CACIR,UAAWZ,EAAQH,WACnBwB,aAAW,SACXF,QAASf,EAHb,SAKA,cAAC,IAAD,Y,iCC3DCkB,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCGPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,qBAAKb,UAAU,OAAO2B,MAAO,CAACC,gBAAgB,OAAD,OAASf,EAAT,MAA7C,SACA,mBAAGb,UAAU,YAAb,SACKuB,OCHAM,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EAEZtB,mBAAS,CAC/B6B,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAfAC,qBAAU,WAENvB,EAAQC,GACHuB,MAAK,SAAAC,GAEFH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAKtB,CAACnB,IAGGoB,EDpBwBK,CAAazB,GAAhCa,EAFuB,EAE5BN,KAAaY,EAFe,EAEfA,QAGpB,OACI,qCACA,oBAAI9B,UAAU,kDAAd,SAAiEW,IAChEmB,GAAW,mBAAG9B,UAAU,mCAAb,wBACR,qBAAKA,UAAU,WAAf,SAEQwB,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,a,QEkBlBe,EA9BM,WAAO,IAAD,EAGahD,mBAAS,CAAC,gBAHvB,mBAGhBiD,EAHgB,KAGJnD,EAHI,KAYvB,OACI,eAACoD,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACQ,oBAAIxC,UAAU,WAAd,4BACA,cAAC,EAAD,CAAab,cAAeA,IAC5B,qBAAKa,UAAU,UAAf,SAEQsC,EAAWlB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,YCnBrC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4d80c4c3.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n    },\n    input: {\n        marginLeft: 8,\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n}));\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const classes = useStyles();\n    \n    const [inputValue, setinputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories( cats => [inputValue, ...cats]);\n            setinputValue('');\n        }\n    }\n    \n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Paper className={classes.root} elevation={1}>\n            <InputBase \n                className={classes.input}\n                placeholder=\"Search Gifs\"\n                value={inputValue}\n                onChange={handleInputChange}\n                onClick={handleSubmit}\n            />\n            <IconButton \n                className={classes.iconButton}\n                aria-label=\"Search\"\n                onClick={handleSubmit}\n            >\n            <SearchIcon/>\n            </IconButton>\n            </Paper>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=25&api_key=wl3luPcrelqzdXzbZqkW9Y1QEEqBAmRy`\n    const response = await fetch(url);\n    const {data} = await response.json();\n    \n    const gifs = data.map (img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        }\n    });\n\n    return gifs;\n}\n","import React from 'react'\n\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card\" style={{backgroundImage: `url(${url})`}}>\n        <p className=\"cardtitle\">\n            {title}\n        </p>\n        {/* <img\n            className=\"cardmedia\"\n            src={url}\n            title={title}\n            alt={title}\n        /> */}\n        </div>\n    )\n}\n\n\n\n\n\n\n\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n\n    return (\n        <>\n        <h3 className=\"categorytitle animate__animated animate__fadeIn\">{category}</h3>\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"cardgrid\">\n                {\n                    images.map(img => (\n                        <GifGridItem \n                        key={img.id}\n                        {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false,\n                });\n            })\n\n\n    }, [category])\n\n\n    return state; // { data: [], loading: true };\n}\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nimport {Container} from 'react-bootstrap';\n\n\nconst GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState([\"dragon ball\"]);\n\n    // const handleAdd = () => {\n    //     // setCategories( [...categories, \"Hunter\"]);\n    //     setCategories( cats => [...cats, \"Hunter\"]);\n\n    // };\n\n\n    return (\n        <Container fluid>\n                <h2 className=\"titleApp\">Gif Expert App</h2>\n                <AddCategory setCategories={setCategories}/>\n                <div className=\"gridApp\">\n                    {\n                        categories.map(category => (\n                            <GifGrid \n                                key={category}\n                                category={category}\n                            />\n                        ))\n                    }\n                </div>\n        </Container>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}